PDF Parser by Taylor Young

This is a node application that is used for converting information in PDFs to CSV.

It is currently set for our team's specific invoicing needs, but can easily be amended to find information in any PDF.

In order to run locally, follow these steps:

0. Clone the repository

1. Download the .zip file and check how many files are in the invoice source folder.
  -If you're not sure how many pdf's are supposed to exist, do the following
    i. From the terminal, cd into the pdf source directory 
    ii. run the following command: "ls -1 | wc -l"
    iii. This will print out the total number of files in the directory and can be used as a reference later in the checkCount function. 

2. Create /pdfs, /json and /csv folders in the root of the project
  -mkdir pdfs 
  -mkdir json
  -mkdir csv

2. Make sure all of the individual PDFs that you want to convert are in the /pdfs directory of this project.
  a.Since you receive the PDFs in a directory, all you have to do is copy them into the /pdfs directory
  b.If the folder contains too many files to be copied and you get the "Argument list is too long" error, do the following 
    i.Copy the directory folder into the /pdfs directory so that you have: 
      -/pdfs
        -/pdf-source
          -pdf1
          -pdf2
          -pdf3..
    ii. From the command line, change directories into the /pdf-source folder (the folder that has all the invoices)
    iii. Copy and run this command:
      for x in *; do case "$x" in  *) mv -- "$x" ../ ;; esac ; done
    iv. Now all of the pdfs will be in the /pdfs directory 
    v. delete the /pdf-source folder by changing directories 'cd ..' and running 'rm -rf pdf-source'
    vi. Navigate back to root directory and delete the pdf source folder inside of /pdf

3. Make sure both the /csv and the /json directories are empty.

4. Make sure node is installed by running node -v
  -if not, install it here https://nodejs.org/en/download/

5. Run 'node checkCount.js'
  -Make sure this outputs the correct number of pdfs

6. run 'node readPdfDirectory.js'
  *This can take minutes to complete*
  -this reads the /pdfs directory and iterates through each pdf
  -for each pdf it utilizes the PDFParser library from 'pdf2json' (https://www.npmjs.com/package/pdf2json)
  -then it uses Node's 'fs' library to write to the /json directory the newly created json files

7. run 'node checkCount.js'
  -make sure the /json directory now contains the same number of files as the /pdfs directory

8. Run 'node transformJSON.js'
  a. This iterates through the /json directory
  b. For each json file, the content is passed to the findData function, which finds all of our relevant data
    i. FindData is the function you would alter if you were ever to need to customize the information you need from the PDF files/ json data
  c. Then the data from each json file is added to an array called csvData
  d. CsvData is passed to the createCSV function which utilizes the npm package 'convert-array-to-csv' and writes the csv to the /csv directory
  e. If you receive the following error: "FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory"
    just run "export NODE_OPTIONS=--max_old_space_size=4096" from the root directory of the application.

9. Open the CSV and do your manual double checking 

10. Delete the /pdfs, /csv and /json directory's content 